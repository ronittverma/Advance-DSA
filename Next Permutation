class Solution {
    public void nextPermutation(int[] nums) {
        int n = nums.length;
        int pivot = -1;

        //finding pivot element
        for(int i=n-2; i>=0; i--){
            if(nums[i] < nums[i+1]){
                pivot = i;
                break;
            }
        }
        //if all the elements are arranged in decending order
        if(pivot == -1){
            int left = 0;
            int right = n-1;

            while(left < right){
                int temp = nums[left];
                nums[left] = nums[right];
                nums[right] = temp;

                left++;
                right--;
            }
            return;
        }

        //finding the just larger element
        for(int i=n-1; i>pivot; i--){
            if(nums[i]>nums[pivot]){
                swap(nums,i,pivot);
                break;
            }
        }

        //reverse element pivot+1 to n-1
        int i=pivot+1;
        int j=n-1;
        while(i<=j){
            swap(nums,i++,j--);
        }
    }
    public void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
